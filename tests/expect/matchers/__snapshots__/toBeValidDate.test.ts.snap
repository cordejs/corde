// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing toBeValidDate should return false for invalid date (any(Boolean)) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31many(Boolean)[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (any(Object)) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31many(Object)[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (any(String)) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31many(String)[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (any(Symbol)) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31many(Symbol)[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (foo) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31mfoo[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (null) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31mnull[39m
"
`;

exports[`testing toBeValidDate should return false for invalid date (undefined) (isNot false) 1`] = `
"    
    [1mexpected[22m should be a valid [32mdate[39m.
    got: [31mundefined[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (1) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31m1[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (1) (isNot true) 2`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31m1[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (2021-08-21T20:39:10.909Z) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31m2021-08-21T20:39:10.909Z[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (any(Date)) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31many(Date)[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (any(Number)) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31many(Number)[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (any) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31many[39m
"
`;

exports[`testing toBeValidDate should return false for valid date (function any(...classType) {
  return new AsymmetricMatcher(...classType);
}) (isNot true) 1`] = `
"    
    [1mexpected[22m should not be a valid [32mdate[39m.
    got: [31many[39m
"
`;
