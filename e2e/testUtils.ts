/* eslint-disable no-console */
import { Message } from "discord.js";
import fs from "fs";
import { removeANSIColorStyle } from "../tests/testHelper";
import * as childProcess from "child_process";
import { CliOutput } from "./types";

namespace testUtils {
  export function parseCommand(message: Message, prefix: string) {
    if (message.content.indexOf("") !== 0) return "";
    const args = message.content.slice(prefix.length).trim().split(" ");
    return args?.shift()?.toLowerCase();
  }

  export function buildCommandWithConfigPath(folderName: string, testFileName: string) {
    return `-f ./e2e/${folderName}/__cordeTest__/${testFileName}`;
  }

  export function saveOutput(filename: string, output: CliOutput) {
    let data = `
    -- AUTOGENERATED TEST SNAPSHOT FILE --
    output: ${output.exitCode}`;

    data += output.stdout;

    fs.writeFileSync(`./snapshots/${filename}`, data);
  }

  /**
   * @internal
   */
  export function runCLIAndSaveOutput(fileName: string, command: string, setConfig = true) {
    const promise = new Promise<CliOutput>((resolve, reject) => {
      const con = `node ./bin/corde ${
        setConfig ? "--config ./e2e/corde.config.ts" : ""
      } ${command}`;

      console.log(`running: ${con}`);

      const child = childProcess.exec(con, (error, stdout, stderr) => {
        console.log(stdout);
        if (error) {
          reject(error);
        }

        if (stdout) {
          console.log(stdout);
          resolve({ stdout: removeANSIColorStyle(stdout), exitCode: child.exitCode });
        }

        if (stderr) {
          reject(stderr);
        }
      });

      child.on("close", (code) => console.log(code));
      child.on("disconnect", () => console.log("disconected"));
      child.on("error", (error) => console.error(error));
      child.on("exit", (code) => console.error(code));
      child.on("message", (message) => console.error(message));
    });

    promise.then((output) => testUtils.saveOutput(fileName, output));
    promise.catch((error) => `command: ${command} failed. Error: ${error}`);

    return promise;
  }
}

export default testUtils;
